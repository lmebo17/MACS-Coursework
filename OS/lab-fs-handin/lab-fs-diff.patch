diff --git a/Makefile b/Makefile
index b83a9a2..e39c97a 100644
--- a/Makefile
+++ b/Makefile
@@ -188,6 +188,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_symlinktest\
+	
 
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..ca9ec94 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -107,6 +107,7 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
diff --git a/kernel/fcntl.h b/kernel/fcntl.h
index 44861b9..b42df18 100644
--- a/kernel/fcntl.h
+++ b/kernel/fcntl.h
@@ -3,3 +3,4 @@
 #define O_RDWR    0x002
 #define O_CREATE  0x200
 #define O_TRUNC   0x400
+#define O_NOFOLLOW 0x800
\ No newline at end of file
diff --git a/kernel/file.h b/kernel/file.h
index b076d1d..5c4eb3a 100644
--- a/kernel/file.h
+++ b/kernel/file.h
@@ -26,7 +26,7 @@ struct inode {
   short minor;
   short nlink;
   uint size;
-  uint addrs[NDIRECT+1];
+  uint addrs[NDIRECT+2];
 };
 
 // map major device number to device functions.
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..26e40a5 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -417,6 +417,38 @@ bmap(struct inode *ip, uint bn)
     return addr;
   }
 
+  bn -= NINDIRECT;
+
+  if(bn < NINDIRECT * NINDIRECT) { 
+    if(!(addr = ip->addrs[NDIRECT+1])){
+      addr = balloc(ip->dev);
+      ip->addrs[NDIRECT + 1] = addr;
+    }
+    
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    int ind = bn/NINDIRECT;
+    if(!(addr = a[ind])){
+      addr = balloc(ip->dev);
+      a[ind] = addr;
+      log_write(bp);
+    }
+    brelse(bp);
+
+    bn %= NINDIRECT;
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    
+    if(!(addr = a[bn])){
+      addr = balloc(ip->dev);
+      a[bn] = addr;
+      log_write(bp);
+    }
+    brelse(bp);
+    return addr;
+  }
+
+
   panic("bmap: out of range");
 }
 
@@ -448,6 +480,28 @@ itrunc(struct inode *ip)
     ip->addrs[NDIRECT] = 0;
   }
 
+
+  if(ip->addrs[NDIRECT + 1]){
+    bp = bread(ip->dev, ip->addrs[NDIRECT + 1]);
+    a = (uint*)bp->data;
+    for(j = 0; j < NINDIRECT; j++){
+      if(a[j]){
+        struct buf* buf = bread(ip->dev, a[j]);
+        uint* temp_a = (uint*)buf->data;
+        for(int  i = 0; i < NINDIRECT; i++){
+          if(temp_a[i]){
+            bfree(ip->dev, temp_a[i]);
+          }
+        }
+        brelse(buf);
+        bfree(ip->dev, a[j]);
+      }
+    }
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT + 1]);
+    ip->addrs[NDIRECT + 1] = 0;
+  }
+
   ip->size = 0;
   iupdate(ip);
 }
diff --git a/kernel/fs.h b/kernel/fs.h
index 139dcc9..78c109d 100644
--- a/kernel/fs.h
+++ b/kernel/fs.h
@@ -24,9 +24,9 @@ struct superblock {
 
 #define FSMAGIC 0x10203040
 
-#define NDIRECT 12
+#define NDIRECT 11
 #define NINDIRECT (BSIZE / sizeof(uint))
-#define MAXFILE (NDIRECT + NINDIRECT)
+#define MAXFILE (NDIRECT + NINDIRECT + NINDIRECT * NINDIRECT)
 
 // On-disk inode structure
 struct dinode {
@@ -35,7 +35,7 @@ struct dinode {
   short minor;          // Minor device number (T_DEVICE only)
   short nlink;          // Number of links to inode in file system
   uint size;            // Size of file (bytes)
-  uint addrs[NDIRECT+1];   // Data block addresses
+  uint addrs[NDIRECT+2];   // Data block addresses
 };
 
 // Inodes per block.
diff --git a/kernel/stat.h b/kernel/stat.h
index 19543af..d3c2e7f 100644
--- a/kernel/stat.h
+++ b/kernel/stat.h
@@ -1,7 +1,7 @@
 #define T_DIR     1   // Directory
 #define T_FILE    2   // File
 #define T_DEVICE  3   // Device
-
+#define T_SYMLINK 4   // Symlink
 struct stat {
   int dev;     // File system's disk device
   uint ino;    // Inode number
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ab84600 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_symlink(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_symlink] sys_symlink
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..0fbf6ed 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_symlink 22
\ No newline at end of file
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..f1a61c9 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -301,6 +301,13 @@ create(char *path, short type, short major, short minor)
   return 0;
 }
 
+// Modify the open system call to handle the case where the path refers to a symbolic link. If the file does not exist, open must fail. When a process specifies O_NOFOLLOW in the flags to open, open should open the symlink (and not follow the symbolic link).
+// If the linked file is also a symbolic link, you must recursively follow it until a non-link file is reached. If the links form a cycle, you must return an error code. You may approximate this by returning an error code if the depth of links reaches some threshold (e.g., 10).
+// Other system calls (e.g., link and unlink) must not follow symbolic links; these system calls operate on the symbolic link itself.
+// You do not have to handle symbolic links to directories for this lab.
+
+
+
 uint64
 sys_open(void)
 {
@@ -323,16 +330,41 @@ sys_open(void)
       return -1;
     }
   } else {
-    if((ip = namei(path)) == 0){
-      end_op();
-      return -1;
-    }
-    ilock(ip);
-    if(ip->type == T_DIR && omode != O_RDONLY){
-      iunlockput(ip);
-      end_op();
-      return -1;
-    }
+      int flag = 1;
+      for(int depth = 1; depth <= 10; depth++){
+          if((ip = namei(path)) == 0){
+              end_op();
+              return -1;
+          }
+
+          ilock(ip);
+
+          if (ip->type == T_SYMLINK && !(omode & O_NOFOLLOW)) {
+              if(readi(ip, 0, (uint64)path, 0, MAXPATH) < 0) {
+                  iunlockput(ip);
+                  end_op();
+                  return -1;
+              }
+              iunlockput(ip);
+          } else {
+              flag = 0;
+              break;
+          }
+      }
+
+      if(flag){
+          end_op();
+          return -1;
+      }
+
+
+      if(ip->type == T_DIR && omode != O_RDONLY){
+          iunlockput(ip);
+          end_op();
+          return -1;
+      }
+     
+        
   }
 
   if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
@@ -370,6 +402,7 @@ sys_open(void)
   return fd;
 }
 
+
 uint64
 sys_mkdir(void)
 {
@@ -503,3 +536,50 @@ sys_pipe(void)
   }
   return 0;
 }
+
+uint64
+sys_symlink(void)
+{
+  char target[MAXPATH]; 
+  char path[MAXPATH];
+  
+  if(argstr(0, target, MAXPATH) < 0 || argstr(1, path, MAXPATH) < 0){
+    return -1;
+  }
+
+  begin_op();
+  struct inode *inode = create(path, T_SYMLINK, 0, 0);
+  
+  if(!inode){
+    end_op();
+    return -1;
+  }
+
+  int length = strlen(target);
+
+  if(writei(inode, 0, (uint64)target, 0, length) < 0) {
+    end_op();
+    return -1;
+  }
+
+  iunlockput(inode);
+
+  end_op();
+  return 0;
+}
+
+
+// uint64
+// sys_link(void)
+// {
+//   char name[DIRSIZ], new[MAXPATH], old[MAXPATH];
+//   struct inode *dp, *ip;
+
+//   if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
+//     return -1;
+
+//   begin_op();
+//   if((ip = namei(old)) == 0){
+//     end_op();
+//     return -1;
+//   }
\ No newline at end of file
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..9a03714
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+10
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..7b768a5 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int symlink(char* target, char* path);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..65a8d6b 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("symlink");
\ No newline at end of file
