diff --git a/Makefile b/Makefile
index b5a6046..ce4d100 100644
--- a/Makefile
+++ b/Makefile
@@ -188,6 +188,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_mmaptest\
 
 
 
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..32bf755 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "fcntl.h"
 
 struct cpu cpus[NCPU];
 
@@ -287,7 +288,6 @@ fork(void)
   if((np = allocproc()) == 0){
     return -1;
   }
-
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -321,7 +321,13 @@ fork(void)
   acquire(&np->lock);
   np->state = RUNNABLE;
   release(&np->lock);
-
+  
+  for (int i = 0; i < 16; ++i) {
+    if (p->vma[i].used) {
+      np->vma[i] = p->vma[i];
+    }
+  }
+  
   return pid;
 }
 
@@ -446,12 +452,10 @@ scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-
+  
   c->proc = 0;
   for(;;){
-    // The most recent process to run may have had interrupts
-    // turned off; enable them to avoid a deadlock if all
-    // processes are waiting.
+    // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
     for(p = proc; p < &proc[NPROC]; p++) {
@@ -525,11 +529,8 @@ forkret(void)
     // File system initialization must be run in the context of a
     // regular process (e.g., because it calls sleep), and thus cannot
     // be run from main().
-    fsinit(ROOTDEV);
-
     first = 0;
-    // ensure other cores see first=0.
-    __sync_synchronize();
+    fsinit(ROOTDEV);
   }
 
   usertrapret();
@@ -685,4 +686,4 @@ procdump(void)
     printf("%d %s %s", p->pid, state, p->name);
     printf("\n");
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..668c6ae 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -81,9 +81,28 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+
+
+struct vma {
+  uint64 addr;
+  uint length;
+  int prot;
+  int flags;
+  int fd;
+  uint offset;
+  int used;
+  struct file* file;
+};
+
+
+
+
+
+
 // Per-process state
 struct proc {
   struct spinlock lock;
+  struct vma vma[16];
 
   // p->lock must be held when using these:
   enum procstate state;        // Process state
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..3f67c45 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -66,6 +66,7 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -101,6 +102,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_mmap(void);
+extern uint64 sys_munmap(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_mmap]   sys_mmap,
+[SYS_munmap]   sys_munmap,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..74d80b6 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_mmap  22
+#define SYS_munmap  23
\ No newline at end of file
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..e0cb21a 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -503,3 +503,99 @@ sys_pipe(void)
   }
   return 0;
 }
+
+
+
+uint64 sys_mmap(void) {
+  
+  int length;
+  int prot;
+  int flags;
+  int fd; struct file* file_ptr;
+  
+  argint(1, &length);
+  argint(2, &prot);
+  argint(3, &flags);
+  argfd(4, &fd, &file_ptr);
+
+  if (file_ptr->writable == 0 && (flags & MAP_SHARED) && (prot & PROT_WRITE)) {
+    return 0xffffffffffffffff;
+  }
+
+  struct proc* p = myproc();
+
+  int unused = -1;
+  for (int i = 0; i < 16; ++i) {
+    if (!p->vma[i].used) {
+      unused = i;
+    }
+  }
+
+  if(unused < 0){
+    return 0xffffffffffffffff;
+  }
+
+  for (int i = p->sz; i < p->sz + length; i += PGSIZE) {
+    void* ptr = kalloc();
+    memset(ptr, 0, PGSIZE);
+    mappages(p->pagetable, i, PGSIZE, (uint64) ptr, PTE_U);
+  }
+
+  struct file* ff = filedup(file_ptr);
+
+  p->vma[unused].used = 1;
+  p->vma[unused].length = length;
+  p->vma[unused].flags = flags;
+  p->vma[unused].prot = prot;
+  p->vma[unused].addr = p->sz;
+  p->vma[unused].fd = fd;
+  p->vma[unused].file = ff;
+  
+  
+  p->sz += length;
+  return p->vma[unused].addr;
+}
+
+
+uint64 sys_munmap(void) {
+  uint64 addr;
+  int length;
+
+
+  argaddr(0, &addr);
+  argint(1, &length);
+  
+  
+  int ind = -1;
+  struct proc* p = myproc();
+  
+  
+  for (int i = 0; i < 16; ++i) {
+      if (p->vma[i].addr <= addr && p->vma[i].addr + p->vma[i].length > addr) {
+        ind = i;
+        break;
+      }
+  }
+  if (ind < 0) 
+    return 0xffffffffffffffff;
+
+  if (p->vma[ind].flags & MAP_SHARED) {
+    filewrite(p->vma[ind].file, addr, length);
+  }
+
+
+  if (p->vma[ind].addr == addr) {
+    p->vma[ind].addr += length;
+    p->vma[ind].length -= length;
+    
+    if (!p->vma[ind].length) {
+      fileclose(p->vma[ind].file);
+      p->vma[ind].used = 0;
+    }
+
+  } else {
+    p->vma[ind].length -= length;
+  }
+
+  return 1;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..da3a37f 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "fcntl.h"
 
 struct spinlock tickslock;
 uint ticks;
@@ -29,6 +30,17 @@ trapinithart(void)
   w_stvec((uint64)kernelvec);
 }
 
+// ravi ver davainqlude da es chavamate aq
+struct file {
+  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;
+  int ref; // reference count
+  char readable;
+  char writable;
+  struct pipe *pipe; // FD_PIPE
+  struct inode *ip;  // FD_INODE and FD_DEVICE
+  uint off;          // FD_INODE
+  short major;       // FD_DEVICE
+};
 //
 // handle an interrupt, exception, or system call from user space.
 // called from trampoline.S
@@ -41,16 +53,60 @@ usertrap(void)
   if((r_sstatus() & SSTATUS_SPP) != 0)
     panic("usertrap: not from user mode");
 
-  // send interrupts and exceptions to kerneltrap(),
-  // since we're now in the kernel.
+  
   w_stvec((uint64)kernelvec);
 
   struct proc *p = myproc();
   
-  // save user program counter.
   p->trapframe->epc = r_sepc();
-  
-  if(r_scause() == 8){
+  if (r_scause() == 13 || r_scause() == 15) {
+    
+    int val = r_stval();
+    
+    int ind = -1;
+    for (int i = 0; i < 16; i++) {
+      if (p->vma[i].addr <= val && val < p->vma[i].addr + p->vma[i].length) {
+        ind = i;
+        break;
+      }
+      
+    }
+
+
+    if (ind >= 0) {
+      pte_t* pte = walk(p->pagetable, val, 0);
+      uint64 page = PTE2PA(*pte);
+
+      begin_op();
+
+      ilock(p->vma[ind].file->ip);
+      readi(p->vma[ind].file->ip, 0, page, val - p->vma[ind].addr, PGSIZE);
+      iunlock(p->vma[ind].file->ip);
+      
+      end_op();
+      
+      
+      int flag = PTE_U;
+      if(p->vma[ind].prot & PROT_EXEC){
+        flag |= PTE_X;
+      }
+
+      if(p->vma[ind].prot & PROT_READ){
+        flag |= PTE_R;
+      }
+
+      if(p->vma[ind].prot & PROT_WRITE){
+        flag |= PTE_W;
+      }
+
+      *pte = *pte | flag;
+      
+    } else {
+      p->killed = 1;
+    }
+
+
+  } else if(r_scause() == 8){
     // system call
 
     if(killed(p))
@@ -218,4 +274,3 @@ devintr()
     return 0;
   }
 }
-
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..9a03714
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+10
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 2d6ace6..975b3c2 100644
--- a/user/user.h
+++ b/user/user.h
@@ -26,6 +26,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void* mmap(void*, uint, int, int, int, uint);
+int munmap(void*, uint);
+
 #ifdef LAB_NET
 int connect(uint32, uint16, uint16);
 #endif
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..f6e8b06 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("mmap");
+entry("munmap");
\ No newline at end of file
