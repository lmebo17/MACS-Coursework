diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..320f3bd
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,6 @@
+{
+    "files.associations": {
+        "proc.h": "c",
+        "thread_context.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/answers-thread.txt b/answers-thread.txt
new file mode 100644
index 0000000..f0c1fc9
--- /dev/null
+++ b/answers-thread.txt
@@ -0,0 +1 @@
+$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
\ No newline at end of file
diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..5f5be63 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -30,6 +30,18 @@ barrier()
   // Block until all threads have called barrier() and
   // then increment bstate.round.
   //
+
+  pthread_mutex_lock(&bstate.barrier_mutex);
+  bstate.nthread++;
+  if(bstate.nthread < nthread){
+    pthread_cond_wait(&bstate.barrier_cond, &bstate.barrier_mutex);
+  } else {
+    bstate.round++;
+    bstate.nthread = 0;
+    pthread_cond_broadcast(&bstate.barrier_cond);
+  }
+  pthread_mutex_unlock(&bstate.barrier_mutex);
+
   
 }
 
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 82afe76..7575494 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -5,9 +5,14 @@
 #include <pthread.h>
 #include <sys/time.h>
 
+
+
+
 #define NBUCKET 5
 #define NKEYS 100000
 
+pthread_mutex_t lock[NBUCKET];            // declare a lock
+
 struct entry {
   int key;
   int value;
@@ -39,6 +44,8 @@ insert(int key, int value, struct entry **p, struct entry *n)
 static 
 void put(int key, int value)
 {
+ 
+
   int i = key % NBUCKET;
 
   // is the key already present?
@@ -47,6 +54,7 @@ void put(int key, int value)
     if (e->key == key)
       break;
   }
+   pthread_mutex_lock(lock + i);       // acquire lock
   if(e){
     // update the existing key.
     e->value = value;
@@ -54,6 +62,7 @@ void put(int key, int value)
     // the new is new.
     insert(key, value, &table[i], table[i]);
   }
+  pthread_mutex_unlock(lock + i); 
 
 }
 
@@ -104,6 +113,9 @@ main(int argc, char *argv[])
   pthread_t *tha;
   void *value;
   double t1, t0;
+  for(int i = 0; i < NBUCKET; i++){
+    pthread_mutex_init(lock + i, NULL); // initialize the lock
+  }
 
 
   if (argc < 2) {
@@ -147,4 +159,4 @@ main(int argc, char *argv[])
 
   printf("%d gets, %.3f seconds, %.0f gets/second\n",
          NKEYS*nthread, t1 - t0, (NKEYS*nthread) / (t1 - t0));
-}
+}
\ No newline at end of file
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..e440e5c
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+3
\ No newline at end of file
diff --git a/user/thread_context.h b/user/thread_context.h
new file mode 100644
index 0000000..afa39a6
--- /dev/null
+++ b/user/thread_context.h
@@ -0,0 +1,20 @@
+#include "kernel/types.h"
+
+struct thread_context {
+  uint64 ra;
+  uint64 sp;
+
+  // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
\ No newline at end of file
diff --git a/user/uthread.c b/user/uthread.c
index 06349f5..ef5b812 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -1,6 +1,7 @@
 #include "kernel/types.h"
 #include "kernel/stat.h"
 #include "user/user.h"
+#include "user/thread_context.h"
 
 /* Possible states of a thread: */
 #define FREE        0x0
@@ -14,6 +15,7 @@
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
+  struct thread_context context;
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
@@ -58,10 +60,7 @@ thread_schedule(void)
     next_thread->state = RUNNING;
     t = current_thread;
     current_thread = next_thread;
-    /* YOUR CODE HERE
-     * Invoke thread_switch to switch from t to next_thread:
-     * thread_switch(??, ??);
-     */
+    thread_switch((uint64)&t->context, (uint64)&current_thread->context);
   } else
     next_thread = 0;
 }
@@ -75,7 +74,8 @@ thread_create(void (*func)())
     if (t->state == FREE) break;
   }
   t->state = RUNNABLE;
-  // YOUR CODE HERE
+  t->context.ra = (uint64)func; // misamarti unda shevinaxo funqciis.
+  t->context.sp = (uint64)&t->stack[STACK_SIZE - 1]; // stack
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..4434fcc 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -7,5 +7,33 @@
 
 	.globl thread_switch
 thread_switch:
-	/* YOUR CODE HERE */
+	sd ra, 0(a0)
+	sd sp, 8(a0)
+	sd s0, 16(a0)
+	sd s1, 24(a0)
+	sd s2, 32(a0)
+	sd s3, 40(a0)
+	sd s4, 48(a0)
+	sd s5, 56(a0)
+	sd s6, 64(a0)
+	sd s7, 72(a0)
+	sd s8, 80(a0)
+	sd s9, 88(a0)
+	sd s10, 96(a0)
+	sd s11, 104(a0)
+
+	ld ra, 0(a1)
+	ld sp, 8(a1)
+	ld s0, 16(a1)
+	ld s1, 24(a1)
+	ld s2, 32(a1)
+	ld s3, 40(a1)
+	ld s4, 48(a1)
+	ld s5, 56(a1)
+	ld s6, 64(a1)
+	ld s7, 72(a1)
+	ld s8, 80(a1)
+	ld s9, 88(a1)
+	ld s10, 96(a1)
+	ld s11, 104(a1)
 	ret    /* return to ra */
